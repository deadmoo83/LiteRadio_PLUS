#!/usr/bin/env python3

import argparse
import click
import colorama
import multiprocessing
import os
import queue
import re
import subprocess
import sys
import threading

def styled(color, msg, reset=True):
    prefix = "".join(color) if isinstance(color, tuple) else color
    suffix = colorama.Style.RESET_ALL if reset else ""
    return prefix + msg + suffix


def print_error_for_file(file, body):
    print(
        styled(colorama.Fore.GREEN, "### File ")
        + styled((colorama.Fore.GREEN, colorama.Style.BRIGHT), file)
    )
    print()
    if body is not None:
        print(body)
        print()


def get_output(*args):
    proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = proc.communicate()
    return output.decode("utf-8")


def git_ls_files(patterns=None):
    command = ["git", "ls-files", "-s"]
    if patterns is not None:
        command.extend(patterns)
    proc = subprocess.Popen(command, stdout=subprocess.PIPE)
    output, err = proc.communicate()
    lines = [x.split() for x in output.decode("utf-8").splitlines()]
    return {s[3].strip(): int(s[0]) for s in lines}


def run_format(args, queue, lock, failed_files):
    """Takes filenames out of queue and runs clang-format on them."""
    while True:
        path = queue.get()
        invocation = ["clang-format"]
        if args.inplace:
            invocation.append("-i")
        else:
            invocation.extend(["--dry-run", "-Werror"])
        invocation.append(path)

        proc = subprocess.run(invocation, capture_output=True, encoding="utf-8")
        if proc.returncode != 0:
            with lock:
                print_error_for_file(path, proc.stderr)
                failed_files.append(path)
        queue.task_done()


def progress_bar_show(value):
    return value if value is not None else ""


def main():
    colorama.init()

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-j",
        "--jobs",
        type=int,
        default=multiprocessing.cpu_count(),
        help="number of format instances to be run in parallel.",
    )
    parser.add_argument(
        "files", nargs="*", default=[], help="files to be processed (regex on path)"
    )
    parser.add_argument(
        "-i", "--inplace", action="store_true", help="reformat files in-place"
    )
    args = parser.parse_args()

    try:
        get_output("clang-format", "-version")
    except:
        print(
            """
        Oops. It looks like clang-format is not installed. 
        
        Please check you can run "clang-format-11 -version" in your terminal and install
        clang-format (v11) if necessary.
        
        Note you can also upload your code as a pull request on GitHub and see the CI check
        output to apply clang-format.
        """
        )
        return 1

    files = []
    for path in git_ls_files(["*.cpp", "*.h", "*.c"]):
        files.append(os.path.relpath(path, os.getcwd()))

    if args.files:
        # Match against files specified on command-line
        file_name_re = re.compile("|".join(args.files))
        files = [p for p in files if file_name_re.search(p)]

    files.sort()

    failed_files = []
    try:
        task_queue = queue.Queue(args.jobs)
        lock = threading.Lock()
        for _ in range(args.jobs):
            t = threading.Thread(
                target=run_format, args=(args, task_queue, lock, failed_files)
            )
            t.daemon = True
            t.start()

        # Fill the queue with files.
        with click.progressbar(
            files, width=30, file=sys.stderr, item_show_func=progress_bar_show
        ) as bar:
            for name in bar:
                task_queue.put(name)

        # Wait for all threads to be done.
        task_queue.join()

    except KeyboardInterrupt:
        print()
        print("Ctrl-C detected, goodbye.")
        os.kill(0, 9)

    sys.exit(len(failed_files))


if __name__ == "__main__":
    main()
